================================================================================
                                                                       *sqlinfo*

SQLite/LuaJIT binding and highly opinionated wrapper for storing, retrieving,
caching, persisting, querying, and connecting to SQLite databases.

To find out more visit https://github.com/tami5/sql.nvim

Help usage in neovim: ignore ||
  :h |sqlinfo|            | main sql.nvim classes
  :h |sqlschemafield|     | open a class or type
  :h |sqltbl.overview|    | show help for sqltbl.
  :h |sqldb.overview|     | show help for sqltbl.
  :h sqldb:...            | show help for a sqldb method.
  :h sqltbl:...           | show help for a sqltbl method.

sql.nvim types:

sqldb                                                                  *sqldb*
    Main sql.nvim object.

    Fields: ~
        {uri}  (string)       database uri. it can be an environment variable
                              or an absolute path. default ":memory:"
        {opts} (sqlopts)      see https://www.sqlite.org/pragma.html |sqlopts|
        {conn} (sqlite_blob)  sqlite connection c object.
        {db}   (sqldb)        reference to fallback to when overwriting
                              |sqldb| methods (extended only).


sqltbl                                                                *sqltbl*
    Main sql table class

    Fields: ~
        {db}    (sqldb)   database .
        {name}  (string)  table name.
        {mtime} (number)  db last modified time.


sqltblext                                                          *sqltblext*
    Extended version of sql table class. This class is generated through
    |sqltbl:extend|

    Fields: ~
        {db}    (sqldb)
        {name}  (string)  table name
        {mtime} (number)  db last modified time


sqlschemafield                                                *sqlschemafield*
    Sqlite schema key fileds. {name} is the only required field.

    Fields: ~
        {cid}       (number)                 column index.
        {name}      (string)                 column key.
        {type}      (string)                 column type.
        {required}  (boolean)                whether it's required.
        {primary}   (boolean)                whether it's a primary key.
        {default}   (string)                 default value when null.
        {reference} (string)
        {on_delete} (sqltrigger)             trigger on row delete.
        {on_update} (table<string, string>)


sqlopts                                                              *sqlopts*
    Sqlite3 Options (TODO: add sqlite option fields and description)


sqlquery_update                                              *sqlquery_update*
    Query fileds used when calling |sqldb:update| or |sqltbl:update|

    Fields: ~
        {where} (table)  filter down values using key values.
        {set}   (table)  key and value to updated.


sqlquery_select                                              *sqlquery_select*
    Query fileds used when calling |sqldb:select| or |sqltbl:get|

    Fields: ~
        {where}    (table)  filter down values using key values.
        {keys}     (table)  keys to include. (default all)
        {join}     (table)  (TODO: support)
        {order_by} (table)  { asc = "key", dsc = {"key", "another_key"} }


sqlflag                                                              *sqlflag*
    Sqlite3 Error Flags (TODO: add sqlite error flags value and description)


sqldb_status                                                    *sqldb_status*
    Status returned from |sqldb:status()|

    Fields: ~
        {msg}  (string)
        {code} (sqlflag)



================================================================================
                                                                *sqldb.overview*

Main sql.nvim object and methods.

sqldb.new({uri}, {opts})                                         *sqldb.new()*
    Creates a new sql.nvim object, without creating a connection to uri.
    |sqldb.new| is identical to |sqldb:open| but it without opening sqlite db
    connection. Thus its most suited for cases where the database might be
    acccess from multiple places. For neovim use cases, this mean from
    different neovim instances.

    ```lua
    local db = sqldb.new("path/to/db" or "$env_var", { ... } or nil)
    ```


    Parameters: ~
        {uri}  (string)   uri to db file.
        {opts} (sqlopts)  (optional) see |sqlopts|

    Return: ~
        sqldb


sqldb:open({uri}, {opts})                                       *sqldb:open()*
    Creates and connect to new sqlite db object, either in memory or via a
    {uri}. If it is called on pre-made |sqldb| object, than it should open it.
    otherwise ignore.

    ```lua
    -- Open db file at path or environment variable, otherwise open in memory.
    local db = sqldb:open("./pathto/dbfile" or "$ENV_VARABLE" or nil, {...})
    -- reopen connection if closed.
    db:open()
    ```


    Parameters: ~
        {uri}  (string)   (optional) {uri} == {nil} then in-memory db.
        {opts} (sqlopts)  (optional) see |sqlopts|

    Return: ~
        sqldb


sqldb:extend({opts})                                          *sqldb:extend()*
    Extend |sqldb| object with extra sugar syntax and api. This is recommended
    for all sqlite use case as it provide convenience. This method is super
    lazy. it try its best to doing any ffi calls until the first operation done
    on a table.

    In the case you want to keep db connection open and not on invocation
    bases. Run |sqldb:open()| right after creating the object or when you
    intend,

    ```lua
    local db = sqldb { -- or sqldb:extend
      uri = "path/to/db", -- i table created with |sqltbl:extend|
      entries = entries,  -- pre-made |sqltblext| with |sqltbl:extend| without db
      category = { title = { "text", unique = true, primary = true}  },
      opts = {} or nil -- custom sqlite3 options, see |sqlopts|
    }
    -- unlike |sqltbl|, |sqltblext| is accessed by dot notation.
    db.entries.insert { {..}, {..} }
    ```


    Parameters: ~
        {opts} (table)  see 'Fields'

    Fields: ~
        {uri}    (string)   path to db file.
        {opts}   (sqlopts)  (optional) see |sqlopts|
        {tname1} (string)   pointing to |sqltblext| or |sqlschema|
        {tnameN} (string)   pointing to |sqltblext| or |sqlschema|

    Return: ~
        sqldb

    See: ~
        |sqltbl:extend()|


sqldb:close()                                                  *sqldb:close()*
    Close sqlite db connection. returns true if closed, error otherwise.

    ```lua
    local db = sqldb:open()
    db:close() -- close connection
    ```


    Return: ~
        boolean


sqldb:with_open()                                          *sqldb:with_open()*
    Same as |sqldb:open| but execute {func} then closes db connection. If the
    function is called as a method to db object e.g. 'db:with_open', then
    {args[1]} must be a function. Else {args[1]} need to be the uri and
    {args[2]} the function.

    ```lua
    -- as a function
    local entries = sqldb.with_open("path/to/db", function(db)
       return db:select("todos", { where = { status = "done" } })
    end)
    -- as a method
    local exists = db:with_open(function()
      return db:exists("projects")
     end)
    ```



    Varargs: ~
        If used as db method, then the {args[1]} should be a function, else

    Return: ~
        any

    See: ~
        |sqldb:open()|


sqldb:isopen()                                                *sqldb:isopen()*
    Predict returning true if db connection is active.

    ```lua
    if db:isopen() then
      db:close()
    end
    ```


    Return: ~
        boolean


sqldb:isclose()                                              *sqldb:isclose()*
    Predict returning true if db connection is indeed closed.

    ```lua
    if db:isclose() then
      error("db is closed")
    end
    ```


    Return: ~
        boolean


sqldb:status()                                                *sqldb:status()*
    Returns current connection status Get last error code


    Return: ~
        sqldb_status


sqldb:eval({statement}, {params})                               *sqldb:eval()*
    Evaluates a sql {statement} and if there are results from evaluating it
    then the function returns list of row(s). Else, it returns a boolean
    indecating whether the evaluation was successful. Optionally, the function
    accept {params} which can be a dict of values corresponding to the sql
    statement or a list of unamed values.


    Parameters: ~
        {statement} (any)    string representing the {statement} or a list of
                             {statements}
        {params}    (table)  params to be bind to {statement}, it can be a
                             list or dict or nil

    Return: ~
        boolean | table

    Usage: ~
        `db:eval("drop table if exists todos")` evaluate without any extra
        arguments.
        `db:eval("select * from todos where id = ?", 1)` evaluate with unamed
        value.
        `db:eval("insert into t(a, b) values(:a, :b)", {a = "1", b = 3})`
        evaluate with named arguments.


sqldb:execute({statement})                                   *sqldb:execute()*
    Execute statement without any return


    Parameters: ~
        {statement} (string)  statement to be executed

    Return: ~
        boolean: true if successful, error out if not.


sqldb:exists({tbl_name})                                      *sqldb:exists()*
    Check if a table with {tbl_name} exists in sqlite db


    Parameters: ~
        {tbl_name} (string)  the table name.

    Return: ~
        boolean

    Usage: ~
        `if not db:exists("todo_tbl") then error("...") end`


sqldb:create({tbl_name}, {schema})                            *sqldb:create()*
    Create a new sqlite db table with {name} based on {schema}. if
    {schema.ensure} then create only when it does not exists. similar to
    'create if not exists'.


    Parameters: ~
        {tbl_name} (string)     table name
        {schema}   (sqlschema)

    Return: ~
        boolean

    Usage: ~
        `db:create("todos", {id = {"int", "primary", "key"}, title = "text"})`
        create table with the given schema.


sqldb:drop({tbl_name})                                          *sqldb:drop()*
    Remove {tbl_name} from database


    Parameters: ~
        {tbl_name} (string)  table name

    Return: ~
        boolean

    Usage: ~
        `db:drop("todos")` drop table.


sqldb:schema({tbl_name})                                      *sqldb:schema()*
    Get {name} table schema, if table does not exist then return an empty
    table.


    Parameters: ~
        {tbl_name} (string)  the table name.

    Return: ~
        sqlschema


sqldb:insert({tbl_name}, {rows})                              *sqldb:insert()*
    Insert to lua table into sqlite database table. returns true incase the
    table was inserted successfully, and the last inserted row id.


    Parameters: ~
        {tbl_name} (string)  the table name
        {rows}     (table)   rows to insert to the table.

    Return: ~
        boolean|integer

    Usage: ~
        `db:insert("todos", { title = "new todo" })` single item.
        `db:insert("items", { { name = "a"}, { name = "b" }, { name = "c" }
        })` insert multiple items.


sqldb:update({tbl_name}, {specs})                             *sqldb:update()*
    Update table row with where closure and list of values returns true incase
    the table was updated successfully.


    Parameters: ~
        {tbl_name} (string)                             the name of the db
                                                        table.
        {specs}    (sqlquery_update|sqlquery_update[])

    Return: ~
        boolean

    Usage: ~
        `db:update("todos", { where = { id = "1" }, values = { action = "DONE"
        }})` update id 1 with the given keys
        `db:update("todos", {{ where = { id = "1" }, values = { action =
        "DONE" }}, {...}, {...}})` multi updates.
        `db:update("todos", { where = { project = "sql.nvim" }, values = {
        status = "later" } )` update multiple rows


sqldb:delete({tbl_name}, {where})                             *sqldb:delete()*
    Delete a {tbl_name} row/rows based on the {specs} given. if no spec was
    given, then all the {tbl_name} content will be deleted.


    Parameters: ~
        {tbl_name} (string)           the name of the db table.
        {where}    (sqlquery_delete)  key value pair to where delete operation
                                      should effect.

    Return: ~
        boolean: true if operation is successfully, false otherwise.

    Usage: ~
        `db:delete("todos")` delete todos table content
        `db:delete("todos", { id = 1 })` delete row that has id as 1
        `db:delete("todos", { id = {1,2,3} })` delete all rows that has value
        of id 1 or 2 or 3
        `db:delete("todos", { id = {1,2,3} }, { id = {"<", 5} } )` matching
        ids or greater than 5


sqldb:select({tbl_name}, {spec})                              *sqldb:select()*
    Query from a table with where and join options


    Parameters: ~
        {tbl_name} (string)           the name of the db table to select on
        {spec}     (sqlquery_select)

    Return: ~
        table[]

    Usage: ~
        `db:select("todos")` get everything
        `db:select("todos", { where = { id = 1 })` get row with id of 1
        `db:select("todos", { where = { status = {"later", "paused"} })` get
        row with status value of later or paused
        `db:select("todos", { limit = 5 })` get 5 items from todos table


sqldb:table({tbl_name}, {opts})                                *sqldb:table()*
    Create new sql-table object. If {opts}.ensure = false, on each run it will
    drop the table and recreate it.


    Parameters: ~
        {tbl_name} (string)  the name of the table. can be new or existing
                             one.
        {opts}     (table)   {schema, ensure (defalut true)}

    Return: ~
        sqltale


sqldb.lib()                                                      *sqldb.lib()*
    Sqlite functions sugar wrappers. See `sql/strfun`




================================================================================
                                                               *sqltbl.overview*

Abstraction to produce more readable code.

sqltbl:new({db}, {name}, {schema})                              *sqltbl:new()*
    Create new sql table object


    Parameters: ~
        {db}     (sqldb)
        {name}   (string)     table name
        {schema} (sqlschema)

    Return: ~
        sqltbl


sqltbl:extend({db}, {name}, {schema})                        *sqltbl:extend()*
    Extend Sqlite Table Object. if first argument is {name} then second should
    be {schema}. If no {db} is provided, the sqltbl object won't be initialized
    until sqltbl.set_db is called


    Parameters: ~
        {db}     (sqldb)
        {name}   (string)
        {schema} (sqlschema)

    Return: ~
        sqltblext


sqltbl:schema({schema})                                      *sqltbl:schema()*
    Create or change table schema. If no {schema} is given, then it return
    current the used schema if it exists or empty table otherwise. On change
    schema it returns boolean indecting success.


    Parameters: ~
        {schema} (sqlschema)

    Return: ~
        sqlschema | boolean

    Usage: ~
        `projects:schema()` get project table schema.
        `projects:schema({...})` mutate project table schema


sqltbl:drop()                                                  *sqltbl:drop()*
    Remove table from database, if the table is already drooped then it returns
    false.


    Return: ~
        boolean

    Usage: ~
        `todos:drop()` drop todos table content.

    See: ~
        |sqldb:drop()|


sqltbl:empty()                                                *sqltbl:empty()*
    Predicate that returns true if the table is empty.


    Return: ~
        boolean

    Usage: ~
        `if todos:empty() then echo "no more todos, you are free :D" end`


sqltbl:exists()                                              *sqltbl:exists()*
    Predicate that returns true if the table exists.


    Return: ~
        boolean

    Usage: ~
        `if not goals:exists() then error("I'm disappointed in you ") end`


sqltbl:count()                                                *sqltbl:count()*
    Get the current number of rows in the table


    Return: ~
        number


sqltbl:get({query})                                             *sqltbl:get()*
    Query the table and return results.


    Parameters: ~
        {query} (sqlquery_select)

    Return: ~
        table

    Usage: ~
        `projects:get()` get a list of all rows in project table.
        `projects:get({ where = { status = "pending", client = "neovim" }})`
        `projects:get({ where = { status = "done" }, limit = 5})` get the last
        5 done projects

    See: ~
        |sqldb:select()|


sqltbl:where({where})                                         *sqltbl:where()*
    Get first match.


    Parameters: ~
        {where} (table)  where key values

    Return: ~
        nil or row

    Usage: ~
        `sqltbl:where{id = 1}`

    See: ~
        |sqldb:select()|


sqltbl:each({func}, {query})                                   *sqltbl:each()*
    Iterate over table rows and execute {func}. Returns true only when rows is
    not emtpy.


    Parameters: ~
        {func}  (function)  func(row)
        {query} (table)     query.where, query.keys, query.join

    Return: ~
        boolean

    Usage: ~
        `let query = { where = { status = "pending"}, contains = { title =
        "fix*" } }`
        `todos:each(function(row) print(row.title) end, query)`


sqltbl:map({func}, {query})                                     *sqltbl:map()*
    Create a new table from iterating over {self.name} rows with {func}.


    Parameters: ~
        {func}  (function)  func(row)
        {query} (table)     query.where, query.keys, query.join

    Return: ~
        table[]

    Usage: ~
        `let query = { where = { status = "pending"}, contains = { title =
        "fix*" } }`
        `local t = todos:map(function(row) return row.title end, query)`


sqltbl:sort({query}, {transform}, {comp})                      *sqltbl:sort()*
    Sorts a table in-place using a transform. Values are ranked in a custom
    order of the results of running `transform (v)` on all values. `transform`
    may also be a string name property sort by. `comp` is a comparison
    function. Adopted from Moses.lua


    Parameters: ~
        {query}     (table)     query.where, query.keys, query.join
        {transform} (function)  a `transform` function to sort elements.
                                Defaults to @{identity}
        {comp}      (function)  a comparison function, defaults to the `<`
                                operator

    Return: ~
        table[]

    Usage: ~
        `local res = t1:sort({ where = {id = {32,12,35}}})` return rows sort
        by id
        `local res = t1:sort({ where = {id = {32,12,35}}}, "age")` return rows
        sort by age
        `local res = t1:sort({where = { ... }}, "age", function(a, b) return a
        > b end)` with custom function


sqltbl:insert({rows})                                        *sqltbl:insert()*
    Same functionalities as |sqldb:insert()|


    Parameters: ~
        {rows} (table)  a row or a group of rows

    Return: ~
        integer: last inserted id

    Usage: ~
        `todos:insert { title = "stop writing examples :D" }` insert single
        item.
        `todos:insert { { ... }, { ... } }` insert multiple items

    See: ~
        |sqldb:insert()|


sqltbl:remove({where})                                       *sqltbl:remove()*
    Same functionalities as |sqldb:delete()|


    Parameters: ~
        {where} (table)  query

    Return: ~
        boolean

    Usage: ~
        `todos:remove()` remove todos table content.
        `todos:remove{ project = "neovim" }` remove all todos where project ==
        "neovim".
        `todos:remove{{project = "neovim"}, {id = 1}}` remove all todos where
        project == "neovim" or id =1

    See: ~
        |sqldb:delete()|


sqltbl:update({specs})                                       *sqltbl:update()*
    Same functionalities as |sqldb:update()|


    Parameters: ~
        {specs} (table)  a table or a list of tables with where and values
                         keys.

    Return: ~
        boolean

    See: ~
        |sqldb:update()|


sqltbl:replace({rows})                                      *sqltbl:replace()*
    replaces table content with {rows}


    Parameters: ~
        {rows} (table)  a row or a group of rows

    Return: ~
        boolean

    See: ~
        |sqldb:delete()|
        |sqldb:insert()|



 vim:tw=78:ts=8:ft=help:norl:
