================================================================================
                                                                       *sqlinfo*

SQLite/LuaJIT binding and highly opinionated wrapper for storing, retrieving,
caching, persisting, querying, and connecting to SQLite databases.

To find out more visit https://github.com/tami5/sql.nvim

Help usage in neovim: ignore ||
  :h |sqlinfo|            | main sql.nvim classes
  :h |sqlschemafield|     | open a class or type
  :h |sqltbl.overview|    | show help for sqltbl.
  :h |sqldb.overview|     | show help for sqltbl.
  :h sqldb:...            | show help for a sqldb method.
  :h sqltbl:...           | show help for a sqltbl method.

sql.nvim types:

sqldb                                                                  *sqldb*
    Main sql.nvim object.

    Fields: ~
        {uri}  (string)       database uri. it can be an environment variable
                              or an absolute path. default ":memory:"
        {opts} (sqlopts)      see https://www.sqlite.org/pragma.html |sqlopts|
        {conn} (sqlite_blob)  sqlite connection c object.
        {db}   (sqldb)        reference to fallback to when overwriting
                              |sqldb| methods (extended only).


sqltbl                                                                *sqltbl*
    Main sql table class

    Fields: ~
        {db}    (sqldb)   database .
        {name}  (string)  table name.
        {mtime} (number)  db last modified time.


sqltblext                                                          *sqltblext*
    Extended version of sql table class. This class is generated through
    |sqltbl:extend|

    Fields: ~
        {db}    (sqldb)
        {name}  (string)  table name
        {mtime} (number)  db last modified time


sqlschemafield                                                *sqlschemafield*
    Sqlite schema key fileds. {name} is the only required field.

    Fields: ~
        {cid}       (number)                 column index.
        {name}      (string)                 column key.
        {type}      (string)                 column type.
        {required}  (boolean)                whether it's required.
        {primary}   (boolean)                whether it's a primary key.
        {default}   (string)                 default value when null.
        {reference} (string)
        {on_delete} (sqltrigger)             trigger on row delete.
        {on_update} (table<string, string>)


sqlopts                                                              *sqlopts*
    Sqlite3 Options (TODO: add sqlite option fields and description)


sqlquery_update                                              *sqlquery_update*
    Query fileds used when calling |sqldb:update| or |sqltbl:update|

    Fields: ~
        {where} (table)  filter down values using key values.
        {set}   (table)  key and value to updated.


sqlquery_select                                              *sqlquery_select*
    Query fileds used when calling |sqldb:select| or |sqltbl:get|

    Fields: ~
        {where}    (table)  filter down values using key values.
        {keys}     (table)  keys to include. (default all)
        {join}     (table)  (TODO: support)
        {order_by} (table)  { asc = "key", dsc = {"key", "another_key"} }


sqlflag                                                              *sqlflag*
    Sqlite3 Error Flags (TODO: add sqlite error flags value and description)


sqldb_status                                                    *sqldb_status*
    Status returned from |sqldb:status()|

    Fields: ~
        {msg}  (string)
        {code} (sqlflag)



