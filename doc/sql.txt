================================================================================
                                                                       *sql.lua*

SQLite/LuaJIT binding and highly opinionated wrapper for storing, retrieving,
caching, persisting, querying, and connecting to SQLite databases.
To find out more:
https://github.com/tami5/sql.nvim
  :h sql
  :h sql.table

SQLDatabaseExt                                                *SQLDatabaseExt*
    SQLDatabase

    Fields: ~
        {super} (SQLDatabase)  



================================================================================
SQLTableExt                                                      *SQLTableExt*
    SQLTable

    Fields: ~
        {super} (SQLTable)  


tbl:new({db}, {opts})                                              *tbl:new()*
    Create new sql table object


    Parameters: ~
        {db}   (SQLDatabase)   
        {opts} (SQLTableOpts)  

    Return: ~
        SQLTable


tbl:schema({schema})                                            *tbl:schema()*
    Create or change table schema. If no {schema} is given, then it return
    current the used schema if it exists or empty table otherwise. On change
    schema it returns boolean indecting success.


    Parameters: ~
        {schema} (table)  table schema definition

    Return: ~
        table table | boolean

    Usage: ~
        `projects:schema()` get project table schema.
        `projects:schema({...})` mutate project table schema


tbl:drop()                                                        *tbl:drop()*
    Remove table from database, if the table is already drooped then it returns
    false.


    Return: ~
        boolean

    Usage: ~
        `todos:drop()` drop todos table content.

    See: ~
        |DB:drop()|


tbl:empty()                                                      *tbl:empty()*
    Predicate that returns true if the table is empty.


    Return: ~
        boolean

    Usage: ~
        `if todos:empty() then echo "no more todos, you are free :D" end`


tbl:exists()                                                    *tbl:exists()*
    Predicate that returns true if the table exists.


    Return: ~
        boolean

    Usage: ~
        `if not goals:exists() then error("I'm disappointed in you ") end`


tbl:count()                                                      *tbl:count()*
    Get the current number of rows in the table


    Return: ~
        number


tbl:get({query})                                                   *tbl:get()*
    Query the table and return results. If cache is enabled and the {query} has
    been ran before, then query results from cache will be returned. Returns
    empty table if no results


    Parameters: ~
        {query} (table)  query.where, query.keys, query.join

    Return: ~
        table

    Usage: ~
        `projects:get()` get a list of all rows in project table.
        `projects:get({ where = { status = "pending", client = "neovim" }})`
        `projects:get({ where = { status = "done" }, limit = 5})` get the last
        5 done projects

    See: ~
        |DB:select()|


tbl:where({where})                                               *tbl:where()*
    Get first match. If cache is enabled and the {query} has been ran before,
    then query results from cache will be returned.


    Parameters: ~
        {where} (table)  where key values

    Return: ~
        nil or row

    Usage: ~
        `tbl:where{id = 1}`

    See: ~
        |DB:select()|


tbl:each({query}, {func})                                         *tbl:each()*
    Iterate over table rows and execute {func}. Returns true only when rows is
    not emtpy.


    Parameters: ~
        {query} (table)     query.where, query.keys, query.join
        {func}  (function)  func(row)

    Return: ~
        boolean

    Usage: ~
        `let query = { where = { status = "pending"}, contains = { title =
        "fix*" } }`
        `todos:each(query, function(row) print(row.title) end)`


tbl:map({query}, {func})                                           *tbl:map()*
    Create a new table from iterating over {self.name} rows with {func}.


    Parameters: ~
        {query} (table)     query.where, query.keys, query.join
        {func}  (function)  a function that expects a row

    Return: ~
        table[]

    Usage: ~
        `let query = { where = { status = "pending"}, contains = { title =
        "fix*" } }`
        `local t = todos:map(query, function(row) return row.title end)`


tbl:sort({query}, {transform}, {comp})                            *tbl:sort()*
    Sorts a table in-place using a transform. Values are ranked in a custom
    order of the results of running `transform (v)` on all values. `transform`
    may also be a string name property sort by. `comp` is a comparison
    function. Adopted from Moses.lua


    Parameters: ~
        {query}     (table)     query.where, query.keys, query.join
        {transform} (function)  a `transform` function to sort elements.
                                Defaults to @{identity}
        {comp}      (function)  a comparison function, defaults to the `<`
                                operator

    Return: ~
        table[]

    Usage: ~
        `local res = t1:sort({ where = {id = {32,12,35}}})` return rows sort
        by id
        `local res = t1:sort({ where = {id = {32,12,35}}}, "age")` return rows
        sort by age
        `local res = t1:sort({where = {id = { 32,12,35 }}}, "age", function(a,
        b) return a > b end)` with custom function


tbl:insert({rows})                                              *tbl:insert()*
    Same functionalities as |DB:insert()|


    Parameters: ~
        {rows} (table)  a row or a group of rows

    Return: ~
        boolean|integer

    Usage: ~
        `todos:insert { title = "stop writing examples :D" }` insert single
        item.
        `todos:insert { { ... }, { ... } }` insert multiple items

    See: ~
        |DB:insert()|


tbl:remove({where})                                             *tbl:remove()*
    Same functionalities as |DB:delete()|


    Parameters: ~
        {where} (table)  query

    Return: ~
        boolean

    Usage: ~
        `todos:remove()` remove todos table content.
        `todos:insert{ project = "neovim" }` remove all todos where project ==
        "neovim".

    See: ~
        |DB:delete()|


tbl:update({specs})                                             *tbl:update()*
    Same functionalities as |DB:update()|


    Parameters: ~
        {specs} (table)  a table or a list of tables with where and values
                         keys.

    Return: ~
        boolean

    See: ~
        |DB:update()|


tbl:replace({rows})                                            *tbl:replace()*
    replaces table content with {rows}


    Parameters: ~
        {rows} (table)  a row or a group of rows

    Return: ~
        boolean

    See: ~
        |DB:delete()|
        |DB:insert()|


tbl:extend({db}, {name}, {opts})                                *tbl:extend()*
    Extend Sqlite Table Object.


    Parameters: ~
        {db}   (SQLDatabase)  
        {name} (string)       
        {opts} (table)        

    Return: ~
        SQLTableExt



 vim:tw=78:ts=8:ft=help:norl:
